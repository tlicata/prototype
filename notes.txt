///////

Prototypes.

Complicated.

Two reasons to know:

1) for job interviews (or to look cool at parties)
2) to implement type hierarchies

///////

Prototype (Wikipedia)

"to act as a thing to be replicated"

relating to Computer Science:

No - MVPs (Minimal Viable Products)
No - Function Prototype (C/C++)
No - Prototype JavaScript Framework
Yes - In prototype-based programming (a form of object-oriented
programming), new objects are produced by cloning existing
objects, which are called prototypes.

///////

Types! (Boolean, Number, String, Object, Array, Function)

Create your own!

///////

Person Exercise!

var me = new Persion("Tim", 29);

Recap:
 - We just created a new type, called Person
 - We could represent a person with {}

Observations:
 - "new" and "this" are complex!
 - What does that have to do with prototypes?

///////

"Every object is linked to a prototype object from which
it can inherit properties. All objects created from object
literals [(i.e. {})]are linked to the Object.prototype, an
object that comes standard with JavaScript."

"When you make a new object, you can select the object that
should be its prototype. The mechanism that JavaScript provides
to do this is messy and complex..."

"new" is one of the Bad Parts

Douglas Crockford
"JavaScript: The Good Parts"

//////

var me = new Instructor("Tim", 29, "WDI");

//////

Add methods to Person.
Override in Instructor.

Revisit Object-Oriented programming definition.
Data + Code = Objects

//////////

"Advocating Object-Oriented programming is like advocating
Pants-Oriented clothing".

Steve Yegge, "Execution in the Kingdom of Nouns"

///////
var car = {
    make: "Dodge",
    model: "Ram",
    year: 1984
};

///////

car.make => "Dodge";
car.toString() => "[Object object]" //?

///////

var Car = function (make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
};

var car = {
    make: "Dodge",
    model: "Ram",
    year: 1984
};
var car_fancy = new Car("Dodge", "Ram", 1984);

///////

var obj = {};
var obj = new Object();

////////

var car = {make: "Dodge", model: "Ram", year: 1984};
var car = new Object({make: "Dodge",
                      model: "Ram",
                      year: 1984});

///////

Car.prototype = Number;
Car.prototype = Array;
// but that's silly!

///////

car instanceof Object => true
car_fancy instanceof Car => true
car instanceof Car => ?
car_fancy instanceof Object => ?

////////

Car.prototype

////////

Terminology!!!
"new" keyword
Class / Type
Constructor
Object-Oriented
Inheritence (Classical vs. Prototypal)

////////

var Car = function (make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
};
var car = new Car("Dodge", "Ram", 1984);

////////

car instanceof Object
car instanceof Car

